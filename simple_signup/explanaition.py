# С точки зрения сервера, при входе в систему происходит следующее:
#
# Неавторизованный пользователь входит на главную страницу сайта.
# Согласно конфигурации URL его перенаправляет на представление protect.IndexView.
# В этом представлении стоит миксин проверки аутентификации. Пользователь не авторизован, поэтому Django перенаправляет его на страницу входа. Для этого в файле настроек мы и указывали LOGIN_URL.
# На странице входа sign/login/ пользователь «отправляется» во встроенное представление LoginView, которое формирует шаблон страницы с формой входа.
# Пользователь вводит данные (username и пароль), они отправляются с помощью POST-запроса на сервер.
# Представление LoginView его обрабатывает, сравнивая со строкой в базе данных. Происходит идентификация и аутентификация.
# При корректных данных для входа пользователь перенаправляется на страницу, указанную в файле настроек LOGIN_REDIRECT_URL. В данном случае это корневая страница сайта.
# Вновь выполняется п. 2.
# Только теперь пользователь является авторизованным, и представление выполняется полностью, отображая шаблон protect/index.html.
# При выходе из системы схема работы во многом проще:
#
# Кнопка «Выйти» есть только на странице авторизованных пользователей.
# При ее нажатии выполняется представление LogoutView, которое «разлогинит» пользователя и сформирует страницу по шаблону sign/logout.html.
# Работоспособность можно проверить, создав суперпользователя, как это мы делали раньше.